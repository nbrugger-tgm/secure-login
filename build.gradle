/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    //id 'java'
    //id 'application'
    id 'maven-publish'
    id 'jacoco'
}
version = "1.1.2"
group = "com.niton"
def pomDescription = "";
description = 'login-secure'

java {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}
repositories {
    mavenCentral()
    maven {
        url("https://niton.jfrog.io/artifactory/java-libs/")
    }
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
	api "com.typesafe:config:1.4.0"
}


publishing {
    publications {
        gpr(MavenPublication) {
            from(components.java)
            pom {
                description = pomDescription
                developers {
                    developer {
                        id = 'nbugger'
                        email = 'nbrugger@student.tgm.ac.at'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nbrugger-tgm/secure-login")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
		
		maven {
            name = "Artifactory"
            url = "https://niton.jfrog.io/artifactory/java-libs"
            credentials {
                username = "nbrugger@student.tgm.ac.at"
				def pwdFile = new File("TOKENS")
				if(pwdFile.exists())
                    password = pwdFile.readLines().get(0)
                else
					password = System.getenv("ARTIFACTORY_API_KEY")
            }
        }
    }
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        enabled = true
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
    }
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
jacoco {
    toolVersion = "0.8.5"
}
test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
